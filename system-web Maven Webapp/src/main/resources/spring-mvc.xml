<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="org.system.web.controller" />
    <context:component-scan base-package="org.system.web.aspect" />
    <context:component-scan base-package="org.system.web.task" />
    <!-- Spring定时器注解开关-->
    <task:annotation-driven />

    <!-- 多线程任务-串行方式任务 -->
    <task:scheduler id="myScheduler" pool-size="10"/>
    <task:scheduled-tasks scheduler="myScheduler">
        <task:scheduled ref="springTaskTestService" method="execute" cron="1/1 * * * * *"/>
        <task:scheduled ref="springTaskThreadService" method="execute" cron="1/1 * * * * *"/>
    </task:scheduled-tasks>

    <!--单线程-串行方式任务-->
    <!--<task:scheduled-tasks >-->
        <!--<task:scheduled ref="springTaskTestService" method="execute" cron="1/1 * * * * *"/>-->
        <!--<task:scheduled ref="springTaskThreadService" method="execute" cron="1/1 * * * * *"/>-->
    <!--</task:scheduled-tasks>-->

    <!--启动对@AspectJ的支持-->
    <aop:aspectj-autoproxy proxy-target-class="true" ></aop:aspectj-autoproxy>
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />


    <!-- 配置静态资源，直接映射到对应的文件夹，	不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/html/**" location="/html/" />
	<mvc:resources mapping="/fonts/**" location="/fonts/" />



	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 是一种简写形式，完全可以手动配置替代这种简写形式， 简写形式可以让初学都快速应用默认配置方案。 <mvc:annotation-driven 
		/> 会自动注册 DefaultAnnotationHandlerMapping与 AnnotationMethodHandlerAdapter 
		两个bean, 是spring MVC为@Controllers分发请求所必须的 -->
	<!-- <mvc:annotation-driven/> -->

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 方法级的handlerMapping，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
            <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
        </list>
		</property>
	</bean>

	<!-- controller级的handlerMapping，完成请求和注解POJO的映射 -->
	<!-- 配置拦截器 : 这是一个特定的拦截器, 为指定的Handlermapping添加一个拦截器 --> 
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		
		<property name="interceptors">
			<list>
				<bean class="org.system.web.interceptor.MyInterceptor"></bean>
			</list>
		</property>
		
	</bean>
	
	<!-- 配置拦截器 : 这是一个总拦截器, 会为每一个HandlerMapping添加一个这样的拦截器 -->
	<mvc:interceptors>
		<bean class="org.system.web.interceptor.URLPrintInterceptor" />
	</mvc:interceptors>


	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>


</beans>  
